//@TODO need to test signing ability. Also consider switching to iron for encrpytion, and serverside storage as well

var Cookies = require('cookies')
var _ = require('lodash')

function Jar(){
  this.keys = null
}

Jar.prototype.sessionRemand = function(request, remand){
  if(!this.keys) throw new Error('Must call Jar init first')

  if(typeof request.cookies == 'undefined') request.cookies = new Cookies(request.raw.request, request.raw.response, this.keys)
  request.session = new Session(request.cookies)

  remand(request.session)
}

Jar.prototype.cookiesRemand = function(request, remand){
  if(!this.keys) throw new Error('Must call Jar init first')
  request.cookies = new Cookies(request.raw.request, request.raw.response, this.keys)
  remand(request.cookies)
}

Jar.prototype.init = function(keys){
  this.keys = keys
}

var jar = new Jar()
module.exports.remand = jar.sessionRemand.bind(jar)
module.exports.setup = function(server, ops){
  jar.init(ops.keys)
  //Attach to preResponse that way we are sure to catch the session if created
  server.pipeline('preResponse', {setSession: setSession})
}

function setSession(request, remand){
  var results = null
  if(request.session && request.session._changed){
    request.session.cookies.set('eqcook:sess', JSON.stringify(request.session.data), {signed: true})
    results = 'set'
  }
  remand(results)
}

function Session(cookies){
  this.cookies = cookies
  try{
    this.data = JSON.parse(cookies.get('eqcook:sess', { signed: true }) || {})
  }
  catch(err){
    console.log('COULD NOT PARSE COOKIE', err)
    this.data = {}
  }
  console.log('session setup', this.data)
  this._changed = false
}

Session.prototype.set = function(key, value){
  this._changed = true

  if(key)
    this.data.key = value
}
